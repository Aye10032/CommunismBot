name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      version: ${{ steps.get-version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build with Gradle (skip tests)
      run: ./gradlew clean bootJar -x test --no-daemon
      
    - name: Extract version from build.gradle
      id: get-version
      run: |
        VERSION=$(grep "^version " build.gradle | cut -d "'" -f 2)
        echo "PROJECT_VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "📦 Project version: $VERSION"
        
    - name: Prepare JAR for Docker
      run: |
        echo "🔄 Renaming JAR file for Docker..."
        cp build/libs/CommunismBot-*.jar build/libs/app.jar
        ls -la build/libs/
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ steps.get-version.outputs.version }}
          type=raw,value=v${{ steps.get-version.outputs.version }}
          
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  notify:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Build Success
      if: needs.build-and-push.result == 'success'
      run: |
        echo "🎉 构建成功！"
        echo "📦 可用的镜像标签:"
        echo "  - ghcr.io/Aye10032/communismbot:latest"
        echo "  - ghcr.io/Aye10032/communismbot:${{ needs.build-and-push.outputs.version }}"
        echo "  - ghcr.io/Aye10032/communismbot:v${{ needs.build-and-push.outputs.version }}"
        echo "🚀 部署命令: docker-compose pull && docker-compose up -d"
        
    - name: Build Failed
      if: needs.build-and-push.result == 'failure'
      run: |
        echo "❌ 构建失败，请检查日志"
