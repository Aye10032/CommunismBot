<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.aye10032.data.historytoday.mapper.HistoryTodayMapper">
    <resultMap id="BaseResultMap" type="com.aye10032.data.historytoday.entity.HistoryToday">
        <constructor>
            <idArg column="id" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="history" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="year" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="event_date" javaType="java.lang.String" jdbcType="VARCHAR"/>
            <arg column="event_type" javaType="java.lang.Integer" jdbcType="INTEGER"/>
            <arg column="from_group" javaType="java.lang.Long" jdbcType="BIGINT"/>
        </constructor>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
        id
        , history, year, event_date, event_type, from_group
    </sql>
    <select id="selectByExample" parameterType="com.aye10032.data.historytoday.entity.HistoryTodayExample"
            resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from history_today
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from history_today
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from history_today
        where id = #{id,jdbcType=INTEGER}
    </delete>
    <delete id="deleteByExample" parameterType="com.aye10032.data.historytoday.entity.HistoryTodayExample">
        delete from history_today
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.aye10032.data.historytoday.entity.HistoryToday">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into history_today (history, year, event_date,
        event_type, from_group)
        values (#{history,jdbcType=VARCHAR}, #{year,jdbcType=VARCHAR}, #{eventDate,jdbcType=VARCHAR},
        #{eventType,jdbcType=INTEGER}, #{fromGroup,jdbcType=BIGINT})
    </insert>
    <insert id="insertSelective" parameterType="com.aye10032.data.historytoday.entity.HistoryToday">
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            SELECT LAST_INSERT_ID()
        </selectKey>
        insert into history_today
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="history != null">
                history,
            </if>
            <if test="year != null">
                year,
            </if>
            <if test="eventDate != null">
                event_date,
            </if>
            <if test="eventType != null">
                event_type,
            </if>
            <if test="fromGroup != null">
                from_group,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="history != null">
                #{history,jdbcType=VARCHAR},
            </if>
            <if test="year != null">
                #{year,jdbcType=VARCHAR},
            </if>
            <if test="eventDate != null">
                #{eventDate,jdbcType=VARCHAR},
            </if>
            <if test="eventType != null">
                #{eventType,jdbcType=INTEGER},
            </if>
            <if test="fromGroup != null">
                #{fromGroup,jdbcType=BIGINT},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="com.aye10032.data.historytoday.entity.HistoryTodayExample"
            resultType="java.lang.Long">
        select count(*) from history_today
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update history_today
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.history != null">
                history = #{record.history,jdbcType=VARCHAR},
            </if>
            <if test="record.year != null">
                year = #{record.year,jdbcType=VARCHAR},
            </if>
            <if test="record.eventDate != null">
                event_date = #{record.eventDate,jdbcType=VARCHAR},
            </if>
            <if test="record.eventType != null">
                event_type = #{record.eventType,jdbcType=INTEGER},
            </if>
            <if test="record.fromGroup != null">
                from_group = #{record.fromGroup,jdbcType=BIGINT},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update history_today
        set id = #{record.id,jdbcType=INTEGER},
        history = #{record.history,jdbcType=VARCHAR},
        year = #{record.year,jdbcType=VARCHAR},
        event_date = #{record.eventDate,jdbcType=VARCHAR},
        event_type = #{record.eventType,jdbcType=INTEGER},
        from_group = #{record.fromGroup,jdbcType=BIGINT}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.aye10032.data.historytoday.entity.HistoryToday">
        update history_today
        <set>
            <if test="history != null">
                history = #{history,jdbcType=VARCHAR},
            </if>
            <if test="year != null">
                year = #{year,jdbcType=VARCHAR},
            </if>
            <if test="eventDate != null">
                event_date = #{eventDate,jdbcType=VARCHAR},
            </if>
            <if test="eventType != null">
                event_type = #{eventType,jdbcType=INTEGER},
            </if>
            <if test="fromGroup != null">
                from_group = #{fromGroup,jdbcType=BIGINT},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.aye10032.data.historytoday.entity.HistoryToday">
        update history_today
        set history    = #{history,jdbcType=VARCHAR},
            year       = #{year,jdbcType=VARCHAR},
            event_date = #{eventDate,jdbcType=VARCHAR},
            event_type = #{eventType,jdbcType=INTEGER},
            from_group = #{fromGroup,jdbcType=BIGINT}
        where id = #{id,jdbcType=INTEGER}
    </update>
</mapper>